#!/bin/bash
#$ -S /bin/bash

set -eu 

fasta_in=$1
ref=$2
outdir=$3
outname=$4
gapopen=$5
amplicon=$6
discard_dir=$7

#setting filename
outfile=${outdir}/${outname}_needle.sam
outfile_edit=${outdir}/${outname}_needle.headerEdit.sam
outfile_filter_pre=${outdir}/${outname}_needle.filtered_pre.bam
outfile_filter=${outdir}/${outname}_needle.filtered.bam
outfile_mdtag=${outdir}/${outname}_needle.MD.bam
out_pre=${outname}.pre
outfile_log=${outdir}/${outname}.diff.log

#Get input fasta headers
seqkit fx2tab $fasta_in | cut -f1 | sort > ${outdir}/_${outname}_input_header.tmp

#Alignment
needleall -aformat3 sam -gapextend 0.5 -gapopen $gapopen -endopen $gapopen -awidth3 5000 -asequence $ref -bsequence <(zcat $fasta_in) -outfile $outfile

#Sam edit
cat $outfile | awk -v amplicon=$amplicon '$0~"^@PG"{print "@SQ\tSN:reference\tLN:"amplicon"\n"$0} $0!~"^@PG"{print}' > $outfile_edit
rm $outfile

#Sam filtering 
#Needle is stupid
cat $outfile_edit | awk '$0~"^@"{print} $0!~"^@"{line_tmp=$6;expected_read_len=0;gsub("I",";",line_tmp);gsub("D","D;",line_tmp);gsub("M",";",line_tmp);split(line_tmp,ar,";");for(i in ar){if(ar[i]!~"D"){expected_read_len=expected_read_len+ar[i]}}; if(expected_read_len-length($10)==0){print $0}}' | samtools view -b -o $outfile_filter_pre
rm $outfile_edit

#Sam fix
samtools view -h $outfile_filter_pre | awk -v amplicon=$amplicon '$0~"^@"{print} $0!~"^@"{cigar=$6;gsub("D|M",";",cigar); gsub("I","I;",cigar); split(cigar,ar,";"); for(x in ar){if(ar[x]!~"I"){cnt+=ar[x]}}; if(cnt==amplicon){print $0}; cnt=0}' | samtools view -b -o $outfile_filter
rm $outfile_filter_pre

#Calmd
samtools calmd -b -e $outfile_filter $ref > $outfile_mdtag
rm $outfile_filter

#Extract variants and mv delsub table and bam file
echo -e "\nStart variant extraction"
python /path/to/py/PRESUME_BE/PRESUME_generate_mutation_table.py -sam $outfile_mdtag -d $outdir -o $out_pre -amplicon_length $amplicon -root $ref -trashbox $discard_dir -no_export_delsub
mv $outfile_mdtag $discard_dir

#alignment error check
bash /path/to/shell/PRESUME_BE/check_alignment_error.sh ${outdir}/${out_pre}_delsub.SEQUENCE.tsv.gz ${outdir}/${out_pre}.MUTATIONTABLE.tsv.gz ${outdir}/${outname} $fasta_in
diff ${outdir}/${outname}.filecheck.fa ${outdir}/${outname}.original.fa | head > $outfile_log
if [ ! -s $outfile_log ]; then
    echo -e "\nLog file(${outfile_log}) is 0 byte. Alignment was successfully completed!"
    rm ${outdir}/${outname}.filecheck.fa ${outdir}/${outname}.original.fa $outfile_log
fi

#Fill lacked queries generated by filtering steps
zcat ${outdir}/${out_pre}.MUTATIONTABLE.tsv.gz | cut -f1 | sort > ${outdir}/_${outname}_output_header.tmp

#Mutation table, make the lacked queries empty
cat \
<(awk 'BEGIN{OFS="\t"} {print $0,""}' <(comm -23 ${outdir}/_${outname}_input_header.tmp ${outdir}/_${outname}_output_header.tmp)) \
<(zcat ${outdir}/${out_pre}.MUTATIONTABLE.tsv.gz) | sort -k1 \
> ${outdir}/${outname}.MUTATIONTABLE.tsv

gzip -f ${outdir}/${outname}.MUTATIONTABLE.tsv
mv ${outdir}/${out_pre}.MUTATIONTABLE.tsv.gz $discard_dir

#Sequence file, make the lacked queries tandem "-"
cat \
<(awk -v amp_len=$amplicon 'BEGIN{OFS="\t"} {col2=""; for(pos=1;pos<=amp_len;pos++){col2=col2"-"}; print $0,col2}' <(comm -23 ${outdir}/_${outname}_input_header.tmp ${outdir}/_${outname}_output_header.tmp)) \
<(zcat ${outdir}/${out_pre}_delsub.SEQUENCE.tsv.gz) | sort -k1 \
> ${outdir}/${outname}_delsub.SEQUENCE.tsv

gzip -f ${outdir}/${outname}_delsub.SEQUENCE.tsv
rm ${outdir}/_${outname}_input_header.tmp
rm ${outdir}/_${outname}_output_header.tmp
mv ${outdir}/${out_pre}_delsub.SEQUENCE.tsv.gz $discard_dir

echo -e "\nProgram completed."
